// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.3
// source: protos/movies_v1/service.proto

package movies_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Запрос всех новостей
type GetMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetMoviesRequest) Reset() {
	*x = GetMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesRequest) ProtoMessage() {}

func (x *GetMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetMoviesRequest) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetMoviesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMoviesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

// Запрос новости по Id
type GetMoviesByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMoviesByIdRequest) Reset() {
	*x = GetMoviesByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoviesByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesByIdRequest) ProtoMessage() {}

func (x *GetMoviesByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesByIdRequest.ProtoReflect.Descriptor instead.
func (*GetMoviesByIdRequest) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetMoviesByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Запрос новостей c фильтрами
type GetMoviesByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *GetMoviesByFilterItem `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Limit   int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page    int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetMoviesByFilterRequest) Reset() {
	*x = GetMoviesByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoviesByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesByFilterRequest) ProtoMessage() {}

func (x *GetMoviesByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesByFilterRequest.ProtoReflect.Descriptor instead.
func (*GetMoviesByFilterRequest) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetMoviesByFilterRequest) GetFilters() *GetMoviesByFilterItem {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetMoviesByFilterRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMoviesByFilterRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetMoviesByFilterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMovie int32           `protobuf:"varint,1,opt,name=typeMovie,proto3" json:"typeMovie,omitempty"`
	Search    string          `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
	Genres    map[int32]int32 `protobuf:"bytes,3,rep,name=genres,proto3" json:"genres,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	YearMin   int32           `protobuf:"varint,4,opt,name=yearMin,proto3" json:"yearMin,omitempty"`
	YearMax   int32           `protobuf:"varint,5,opt,name=yearMax,proto3" json:"yearMax,omitempty"`
	BestMovie bool            `protobuf:"varint,6,opt,name=bestMovie,proto3" json:"bestMovie,omitempty"`
}

func (x *GetMoviesByFilterItem) Reset() {
	*x = GetMoviesByFilterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoviesByFilterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesByFilterItem) ProtoMessage() {}

func (x *GetMoviesByFilterItem) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesByFilterItem.ProtoReflect.Descriptor instead.
func (*GetMoviesByFilterItem) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetMoviesByFilterItem) GetTypeMovie() int32 {
	if x != nil {
		return x.TypeMovie
	}
	return 0
}

func (x *GetMoviesByFilterItem) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetMoviesByFilterItem) GetGenres() map[int32]int32 {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *GetMoviesByFilterItem) GetYearMin() int32 {
	if x != nil {
		return x.YearMin
	}
	return 0
}

func (x *GetMoviesByFilterItem) GetYearMax() int32 {
	if x != nil {
		return x.YearMax
	}
	return 0
}

func (x *GetMoviesByFilterItem) GetBestMovie() bool {
	if x != nil {
		return x.BestMovie
	}
	return false
}

// Запрос на добавление новости
type AddMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Country     string          `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	ReleaseDate int32           `protobuf:"varint,4,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	TimeMovie   int32           `protobuf:"varint,5,opt,name=timeMovie,proto3" json:"timeMovie,omitempty"`
	ScoreKP     float64         `protobuf:"fixed64,6,opt,name=scoreKP,proto3" json:"scoreKP,omitempty"`
	ScoreIMDB   float64         `protobuf:"fixed64,7,opt,name=scoreIMDB,proto3" json:"scoreIMDB,omitempty"`
	Poster      string          `protobuf:"bytes,8,opt,name=poster,proto3" json:"poster,omitempty"`
	TypeMovie   int32           `protobuf:"varint,9,opt,name=typeMovie,proto3" json:"typeMovie,omitempty"`
	Genres      map[int32]int32 `protobuf:"bytes,10,rep,name=genres,proto3" json:"genres,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AddMoviesRequest) Reset() {
	*x = AddMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMoviesRequest) ProtoMessage() {}

func (x *AddMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMoviesRequest.ProtoReflect.Descriptor instead.
func (*AddMoviesRequest) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *AddMoviesRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddMoviesRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddMoviesRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AddMoviesRequest) GetReleaseDate() int32 {
	if x != nil {
		return x.ReleaseDate
	}
	return 0
}

func (x *AddMoviesRequest) GetTimeMovie() int32 {
	if x != nil {
		return x.TimeMovie
	}
	return 0
}

func (x *AddMoviesRequest) GetScoreKP() float64 {
	if x != nil {
		return x.ScoreKP
	}
	return 0
}

func (x *AddMoviesRequest) GetScoreIMDB() float64 {
	if x != nil {
		return x.ScoreIMDB
	}
	return 0
}

func (x *AddMoviesRequest) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *AddMoviesRequest) GetTypeMovie() int32 {
	if x != nil {
		return x.TypeMovie
	}
	return 0
}

func (x *AddMoviesRequest) GetGenres() map[int32]int32 {
	if x != nil {
		return x.Genres
	}
	return nil
}

// Запрос на удаление новости
type DelMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelMoviesRequest) Reset() {
	*x = DelMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelMoviesRequest) ProtoMessage() {}

func (x *DelMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelMoviesRequest.ProtoReflect.Descriptor instead.
func (*DelMoviesRequest) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *DelMoviesRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Вывод всех/категоризированных новостей
type GetMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Movies []*GetMovieItem `protobuf:"bytes,1,rep,name=movies,proto3" json:"movies,omitempty"`
}

func (x *GetMoviesResponse) Reset() {
	*x = GetMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesResponse) ProtoMessage() {}

func (x *GetMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetMoviesResponse) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetMoviesResponse) GetMovies() []*GetMovieItem {
	if x != nil {
		return x.Movies
	}
	return nil
}

type GetMovieItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ReleaseDate int32   `protobuf:"varint,4,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	ScoreKP     float64 `protobuf:"fixed64,5,opt,name=scoreKP,proto3" json:"scoreKP,omitempty"`
	ScoreIMDB   float64 `protobuf:"fixed64,6,opt,name=scoreIMDB,proto3" json:"scoreIMDB,omitempty"`
	Poster      string  `protobuf:"bytes,7,opt,name=poster,proto3" json:"poster,omitempty"`
	TypeMovie   int32   `protobuf:"varint,8,opt,name=typeMovie,proto3" json:"typeMovie,omitempty"`
	Genres      string  `protobuf:"bytes,9,opt,name=genres,proto3" json:"genres,omitempty"`
}

func (x *GetMovieItem) Reset() {
	*x = GetMovieItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMovieItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieItem) ProtoMessage() {}

func (x *GetMovieItem) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieItem.ProtoReflect.Descriptor instead.
func (*GetMovieItem) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetMovieItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetMovieItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetMovieItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetMovieItem) GetReleaseDate() int32 {
	if x != nil {
		return x.ReleaseDate
	}
	return 0
}

func (x *GetMovieItem) GetScoreKP() float64 {
	if x != nil {
		return x.ScoreKP
	}
	return 0
}

func (x *GetMovieItem) GetScoreIMDB() float64 {
	if x != nil {
		return x.ScoreIMDB
	}
	return 0
}

func (x *GetMovieItem) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *GetMovieItem) GetTypeMovie() int32 {
	if x != nil {
		return x.TypeMovie
	}
	return 0
}

func (x *GetMovieItem) GetGenres() string {
	if x != nil {
		return x.Genres
	}
	return ""
}

// Вывод новости по Id
type GetMoviesByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Country     string  `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	ReleaseDate int32   `protobuf:"varint,5,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	TimeMovie   int32   `protobuf:"varint,6,opt,name=timeMovie,proto3" json:"timeMovie,omitempty"`
	ScoreKP     float64 `protobuf:"fixed64,7,opt,name=scoreKP,proto3" json:"scoreKP,omitempty"`
	ScoreIMDB   float64 `protobuf:"fixed64,8,opt,name=scoreIMDB,proto3" json:"scoreIMDB,omitempty"`
	Poster      string  `protobuf:"bytes,9,opt,name=poster,proto3" json:"poster,omitempty"`
	TypeMovie   int32   `protobuf:"varint,10,opt,name=typeMovie,proto3" json:"typeMovie,omitempty"`
	Genres      string  `protobuf:"bytes,11,opt,name=genres,proto3" json:"genres,omitempty"`
}

func (x *GetMoviesByIdResponse) Reset() {
	*x = GetMoviesByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoviesByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesByIdResponse) ProtoMessage() {}

func (x *GetMoviesByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesByIdResponse.ProtoReflect.Descriptor instead.
func (*GetMoviesByIdResponse) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetMoviesByIdResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetMoviesByIdResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetMoviesByIdResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetMoviesByIdResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetMoviesByIdResponse) GetReleaseDate() int32 {
	if x != nil {
		return x.ReleaseDate
	}
	return 0
}

func (x *GetMoviesByIdResponse) GetTimeMovie() int32 {
	if x != nil {
		return x.TimeMovie
	}
	return 0
}

func (x *GetMoviesByIdResponse) GetScoreKP() float64 {
	if x != nil {
		return x.ScoreKP
	}
	return 0
}

func (x *GetMoviesByIdResponse) GetScoreIMDB() float64 {
	if x != nil {
		return x.ScoreIMDB
	}
	return 0
}

func (x *GetMoviesByIdResponse) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *GetMoviesByIdResponse) GetTypeMovie() int32 {
	if x != nil {
		return x.TypeMovie
	}
	return 0
}

func (x *GetMoviesByIdResponse) GetGenres() string {
	if x != nil {
		return x.Genres
	}
	return ""
}

// Добавление новости
type AddMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *AddMoviesResponse) Reset() {
	*x = AddMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMoviesResponse) ProtoMessage() {}

func (x *AddMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMoviesResponse.ProtoReflect.Descriptor instead.
func (*AddMoviesResponse) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *AddMoviesResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddMoviesResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

// Удаление новости
type DelMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *DelMoviesResponse) Reset() {
	*x = DelMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_movies_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelMoviesResponse) ProtoMessage() {}

func (x *DelMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_movies_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelMoviesResponse.ProtoReflect.Descriptor instead.
func (*DelMoviesResponse) Descriptor() ([]byte, []int) {
	return file_protos_movies_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *DelMoviesResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

var File_protos_movies_v1_service_proto protoreflect.FileDescriptor

var file_protos_movies_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x5f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x22, 0x3c, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x65,
	0x61, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x79, 0x65, 0x61,
	0x72, 0x4d, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x61, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x1a, 0x39, 0x0a, 0x0b,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x03, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4b, 0x50, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4b, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x49, 0x4d, 0x44, 0x42, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x49, 0x4d, 0x44, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4b, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x4b, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x49, 0x4d, 0x44, 0x42, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x49, 0x4d, 0x44, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4b, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4b, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x49, 0x4d, 0x44, 0x42, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x49, 0x4d, 0x44, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x25, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x32, 0x90, 0x03, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x56, 0x31,
	0x12, 0x46, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x5f, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_movies_v1_service_proto_rawDescOnce sync.Once
	file_protos_movies_v1_service_proto_rawDescData = file_protos_movies_v1_service_proto_rawDesc
)

func file_protos_movies_v1_service_proto_rawDescGZIP() []byte {
	file_protos_movies_v1_service_proto_rawDescOnce.Do(func() {
		file_protos_movies_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_movies_v1_service_proto_rawDescData)
	})
	return file_protos_movies_v1_service_proto_rawDescData
}

var file_protos_movies_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_protos_movies_v1_service_proto_goTypes = []interface{}{
	(*GetMoviesRequest)(nil),         // 0: movies_v1.GetMoviesRequest
	(*GetMoviesByIdRequest)(nil),     // 1: movies_v1.GetMoviesByIdRequest
	(*GetMoviesByFilterRequest)(nil), // 2: movies_v1.GetMoviesByFilterRequest
	(*GetMoviesByFilterItem)(nil),    // 3: movies_v1.GetMoviesByFilterItem
	(*AddMoviesRequest)(nil),         // 4: movies_v1.AddMoviesRequest
	(*DelMoviesRequest)(nil),         // 5: movies_v1.DelMoviesRequest
	(*GetMoviesResponse)(nil),        // 6: movies_v1.GetMoviesResponse
	(*GetMovieItem)(nil),             // 7: movies_v1.GetMovieItem
	(*GetMoviesByIdResponse)(nil),    // 8: movies_v1.GetMoviesByIdResponse
	(*AddMoviesResponse)(nil),        // 9: movies_v1.AddMoviesResponse
	(*DelMoviesResponse)(nil),        // 10: movies_v1.DelMoviesResponse
	nil,                              // 11: movies_v1.GetMoviesByFilterItem.GenresEntry
	nil,                              // 12: movies_v1.AddMoviesRequest.GenresEntry
}
var file_protos_movies_v1_service_proto_depIdxs = []int32{
	3,  // 0: movies_v1.GetMoviesByFilterRequest.filters:type_name -> movies_v1.GetMoviesByFilterItem
	11, // 1: movies_v1.GetMoviesByFilterItem.genres:type_name -> movies_v1.GetMoviesByFilterItem.GenresEntry
	12, // 2: movies_v1.AddMoviesRequest.genres:type_name -> movies_v1.AddMoviesRequest.GenresEntry
	7,  // 3: movies_v1.GetMoviesResponse.movies:type_name -> movies_v1.GetMovieItem
	0,  // 4: movies_v1.MoviesV1.GetMovies:input_type -> movies_v1.GetMoviesRequest
	1,  // 5: movies_v1.MoviesV1.GetMoviesById:input_type -> movies_v1.GetMoviesByIdRequest
	2,  // 6: movies_v1.MoviesV1.GetMoviesByCategory:input_type -> movies_v1.GetMoviesByFilterRequest
	4,  // 7: movies_v1.MoviesV1.AddMovies:input_type -> movies_v1.AddMoviesRequest
	5,  // 8: movies_v1.MoviesV1.DelMovies:input_type -> movies_v1.DelMoviesRequest
	6,  // 9: movies_v1.MoviesV1.GetMovies:output_type -> movies_v1.GetMoviesResponse
	8,  // 10: movies_v1.MoviesV1.GetMoviesById:output_type -> movies_v1.GetMoviesByIdResponse
	6,  // 11: movies_v1.MoviesV1.GetMoviesByCategory:output_type -> movies_v1.GetMoviesResponse
	9,  // 12: movies_v1.MoviesV1.AddMovies:output_type -> movies_v1.AddMoviesResponse
	10, // 13: movies_v1.MoviesV1.DelMovies:output_type -> movies_v1.DelMoviesResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_protos_movies_v1_service_proto_init() }
func file_protos_movies_v1_service_proto_init() {
	if File_protos_movies_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_movies_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_movies_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoviesByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_movies_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoviesByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_movies_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoviesByFilterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_movies_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_movies_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_movies_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_movies_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMovieItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_movies_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoviesByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_movies_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_movies_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_movies_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_movies_v1_service_proto_goTypes,
		DependencyIndexes: file_protos_movies_v1_service_proto_depIdxs,
		MessageInfos:      file_protos_movies_v1_service_proto_msgTypes,
	}.Build()
	File_protos_movies_v1_service_proto = out.File
	file_protos_movies_v1_service_proto_rawDesc = nil
	file_protos_movies_v1_service_proto_goTypes = nil
	file_protos_movies_v1_service_proto_depIdxs = nil
}
