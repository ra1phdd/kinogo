/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: protos/movies_v1/movies_v1.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */

/* eslint-disable */
// @ts-nocheck

import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace movies_v1 {
    export class GetMoviesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: number;
            page?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            limit?: number;
            page?: number;
        }): GetMoviesRequest {
            const message = new GetMoviesRequest({});
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: number;
                page?: number;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.limit != 0)
                writer.writeInt32(1, this.limit);
            if (this.page != 0)
                writer.writeInt32(2, this.page);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMoviesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMoviesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.limit = reader.readInt32();
                        break;
                    case 2:
                        message.page = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMoviesRequest {
            return GetMoviesRequest.deserialize(bytes);
        }
    }
    export class GetMoviesByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): GetMoviesByIdRequest {
            const message = new GetMoviesByIdRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMoviesByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMoviesByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMoviesByIdRequest {
            return GetMoviesByIdRequest.deserialize(bytes);
        }
    }
    export class GetMoviesByFilterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filters?: GetMoviesByFilterItem;
            limit?: number;
            page?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, GetMoviesByFilterItem, 1) as GetMoviesByFilterItem;
        }
        set filters(value: GetMoviesByFilterItem) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_filters() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            filters?: ReturnType<typeof GetMoviesByFilterItem.prototype.toObject>;
            limit?: number;
            page?: number;
        }): GetMoviesByFilterRequest {
            const message = new GetMoviesByFilterRequest({});
            if (data.filters != null) {
                message.filters = GetMoviesByFilterItem.fromObject(data.filters);
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            return message;
        }
        toObject() {
            const data: {
                filters?: ReturnType<typeof GetMoviesByFilterItem.prototype.toObject>;
                limit?: number;
                page?: number;
            } = {};
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_filters)
                writer.writeMessage(1, this.filters, () => this.filters.serialize(writer));
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (this.page != 0)
                writer.writeInt32(3, this.page);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMoviesByFilterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMoviesByFilterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.filters, () => message.filters = GetMoviesByFilterItem.deserialize(reader));
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    case 3:
                        message.page = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMoviesByFilterRequest {
            return GetMoviesByFilterRequest.deserialize(bytes);
        }
    }
    export class GetMoviesByFilterItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            typeMovie?: number;
            search?: string;
            genres?: Genres[];
            yearMin?: number;
            yearMax?: number;
            bestMovie?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("typeMovie" in data && data.typeMovie != undefined) {
                    this.typeMovie = data.typeMovie;
                }
                if ("search" in data && data.search != undefined) {
                    this.search = data.search;
                }
                if ("genres" in data && data.genres != undefined) {
                    this.genres = data.genres;
                }
                if ("yearMin" in data && data.yearMin != undefined) {
                    this.yearMin = data.yearMin;
                }
                if ("yearMax" in data && data.yearMax != undefined) {
                    this.yearMax = data.yearMax;
                }
                if ("bestMovie" in data && data.bestMovie != undefined) {
                    this.bestMovie = data.bestMovie;
                }
            }
        }
        get typeMovie() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set typeMovie(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get search() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set search(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get genres() {
            return pb_1.Message.getRepeatedWrapperField(this, Genres, 3) as Genres[];
        }
        set genres(value: Genres[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get yearMin() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set yearMin(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get yearMax() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set yearMax(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get bestMovie() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set bestMovie(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            typeMovie?: number;
            search?: string;
            genres?: ReturnType<typeof Genres.prototype.toObject>[];
            yearMin?: number;
            yearMax?: number;
            bestMovie?: boolean;
        }): GetMoviesByFilterItem {
            const message = new GetMoviesByFilterItem({});
            if (data.typeMovie != null) {
                message.typeMovie = data.typeMovie;
            }
            if (data.search != null) {
                message.search = data.search;
            }
            if (data.genres != null) {
                message.genres = data.genres.map(item => Genres.fromObject(item));
            }
            if (data.yearMin != null) {
                message.yearMin = data.yearMin;
            }
            if (data.yearMax != null) {
                message.yearMax = data.yearMax;
            }
            if (data.bestMovie != null) {
                message.bestMovie = data.bestMovie;
            }
            return message;
        }
        toObject() {
            const data: {
                typeMovie?: number;
                search?: string;
                genres?: ReturnType<typeof Genres.prototype.toObject>[];
                yearMin?: number;
                yearMax?: number;
                bestMovie?: boolean;
            } = {};
            if (this.typeMovie != null) {
                data.typeMovie = this.typeMovie;
            }
            if (this.search != null) {
                data.search = this.search;
            }
            if (this.genres != null) {
                data.genres = this.genres.map((item: Genres) => item.toObject());
            }
            if (this.yearMin != null) {
                data.yearMin = this.yearMin;
            }
            if (this.yearMax != null) {
                data.yearMax = this.yearMax;
            }
            if (this.bestMovie != null) {
                data.bestMovie = this.bestMovie;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.typeMovie != 0)
                writer.writeInt32(1, this.typeMovie);
            if (this.search.length)
                writer.writeString(2, this.search);
            if (this.genres.length)
                writer.writeRepeatedMessage(3, this.genres, (item: Genres) => item.serialize(writer));
            if (this.yearMin != 0)
                writer.writeInt32(4, this.yearMin);
            if (this.yearMax != 0)
                writer.writeInt32(5, this.yearMax);
            if (this.bestMovie != false)
                writer.writeBool(6, this.bestMovie);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMoviesByFilterItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMoviesByFilterItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.typeMovie = reader.readInt32();
                        break;
                    case 2:
                        message.search = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.genres, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Genres.deserialize(reader), Genres));
                        break;
                    case 4:
                        message.yearMin = reader.readInt32();
                        break;
                    case 5:
                        message.yearMax = reader.readInt32();
                        break;
                    case 6:
                        message.bestMovie = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMoviesByFilterItem {
            return GetMoviesByFilterItem.deserialize(bytes);
        }
    }
    export class AddMoviesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            description?: string;
            countries?: Countries[];
            releaseDate?: number;
            timeMovie?: number;
            scoreKP?: number;
            scoreIMDB?: number;
            poster?: string;
            typeMovie?: number;
            genres?: Genres[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("countries" in data && data.countries != undefined) {
                    this.countries = data.countries;
                }
                if ("releaseDate" in data && data.releaseDate != undefined) {
                    this.releaseDate = data.releaseDate;
                }
                if ("timeMovie" in data && data.timeMovie != undefined) {
                    this.timeMovie = data.timeMovie;
                }
                if ("scoreKP" in data && data.scoreKP != undefined) {
                    this.scoreKP = data.scoreKP;
                }
                if ("scoreIMDB" in data && data.scoreIMDB != undefined) {
                    this.scoreIMDB = data.scoreIMDB;
                }
                if ("poster" in data && data.poster != undefined) {
                    this.poster = data.poster;
                }
                if ("typeMovie" in data && data.typeMovie != undefined) {
                    this.typeMovie = data.typeMovie;
                }
                if ("genres" in data && data.genres != undefined) {
                    this.genres = data.genres;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get countries() {
            return pb_1.Message.getRepeatedWrapperField(this, Countries, 3) as Countries[];
        }
        set countries(value: Countries[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get releaseDate() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set releaseDate(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get timeMovie() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timeMovie(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get scoreKP() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set scoreKP(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get scoreIMDB() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set scoreIMDB(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get poster() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set poster(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get typeMovie() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set typeMovie(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get genres() {
            return pb_1.Message.getRepeatedWrapperField(this, Genres, 10) as Genres[];
        }
        set genres(value: Genres[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            title?: string;
            description?: string;
            countries?: ReturnType<typeof Countries.prototype.toObject>[];
            releaseDate?: number;
            timeMovie?: number;
            scoreKP?: number;
            scoreIMDB?: number;
            poster?: string;
            typeMovie?: number;
            genres?: ReturnType<typeof Genres.prototype.toObject>[];
        }): AddMoviesRequest {
            const message = new AddMoviesRequest({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.countries != null) {
                message.countries = data.countries.map(item => Countries.fromObject(item));
            }
            if (data.releaseDate != null) {
                message.releaseDate = data.releaseDate;
            }
            if (data.timeMovie != null) {
                message.timeMovie = data.timeMovie;
            }
            if (data.scoreKP != null) {
                message.scoreKP = data.scoreKP;
            }
            if (data.scoreIMDB != null) {
                message.scoreIMDB = data.scoreIMDB;
            }
            if (data.poster != null) {
                message.poster = data.poster;
            }
            if (data.typeMovie != null) {
                message.typeMovie = data.typeMovie;
            }
            if (data.genres != null) {
                message.genres = data.genres.map(item => Genres.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                description?: string;
                countries?: ReturnType<typeof Countries.prototype.toObject>[];
                releaseDate?: number;
                timeMovie?: number;
                scoreKP?: number;
                scoreIMDB?: number;
                poster?: string;
                typeMovie?: number;
                genres?: ReturnType<typeof Genres.prototype.toObject>[];
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.countries != null) {
                data.countries = this.countries.map((item: Countries) => item.toObject());
            }
            if (this.releaseDate != null) {
                data.releaseDate = this.releaseDate;
            }
            if (this.timeMovie != null) {
                data.timeMovie = this.timeMovie;
            }
            if (this.scoreKP != null) {
                data.scoreKP = this.scoreKP;
            }
            if (this.scoreIMDB != null) {
                data.scoreIMDB = this.scoreIMDB;
            }
            if (this.poster != null) {
                data.poster = this.poster;
            }
            if (this.typeMovie != null) {
                data.typeMovie = this.typeMovie;
            }
            if (this.genres != null) {
                data.genres = this.genres.map((item: Genres) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.countries.length)
                writer.writeRepeatedMessage(3, this.countries, (item: Countries) => item.serialize(writer));
            if (this.releaseDate != 0)
                writer.writeInt32(4, this.releaseDate);
            if (this.timeMovie != 0)
                writer.writeInt32(5, this.timeMovie);
            if (this.scoreKP != 0)
                writer.writeDouble(6, this.scoreKP);
            if (this.scoreIMDB != 0)
                writer.writeDouble(7, this.scoreIMDB);
            if (this.poster.length)
                writer.writeString(8, this.poster);
            if (this.typeMovie != 0)
                writer.writeInt32(9, this.typeMovie);
            if (this.genres.length)
                writer.writeRepeatedMessage(10, this.genres, (item: Genres) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddMoviesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddMoviesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.countries, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Countries.deserialize(reader), Countries));
                        break;
                    case 4:
                        message.releaseDate = reader.readInt32();
                        break;
                    case 5:
                        message.timeMovie = reader.readInt32();
                        break;
                    case 6:
                        message.scoreKP = reader.readDouble();
                        break;
                    case 7:
                        message.scoreIMDB = reader.readDouble();
                        break;
                    case 8:
                        message.poster = reader.readString();
                        break;
                    case 9:
                        message.typeMovie = reader.readInt32();
                        break;
                    case 10:
                        reader.readMessage(message.genres, () => pb_1.Message.addToRepeatedWrapperField(message, 10, Genres.deserialize(reader), Genres));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddMoviesRequest {
            return AddMoviesRequest.deserialize(bytes);
        }
    }
    export class Countries extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): Countries {
            const message = new Countries({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Countries {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Countries();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Countries {
            return Countries.deserialize(bytes);
        }
    }
    export class Genres extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): Genres {
            const message = new Genres({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Genres {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Genres();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Genres {
            return Genres.deserialize(bytes);
        }
    }
    export class DeleteMoviesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): DeleteMoviesRequest {
            const message = new DeleteMoviesRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteMoviesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteMoviesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteMoviesRequest {
            return DeleteMoviesRequest.deserialize(bytes);
        }
    }
    export class GetMoviesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            movies?: GetMovieItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("movies" in data && data.movies != undefined) {
                    this.movies = data.movies;
                }
            }
        }
        get movies() {
            return pb_1.Message.getRepeatedWrapperField(this, GetMovieItem, 1) as GetMovieItem[];
        }
        set movies(value: GetMovieItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            movies?: ReturnType<typeof GetMovieItem.prototype.toObject>[];
        }): GetMoviesResponse {
            const message = new GetMoviesResponse({});
            if (data.movies != null) {
                message.movies = data.movies.map(item => GetMovieItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                movies?: ReturnType<typeof GetMovieItem.prototype.toObject>[];
            } = {};
            if (this.movies != null) {
                data.movies = this.movies.map((item: GetMovieItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.movies.length)
                writer.writeRepeatedMessage(1, this.movies, (item: GetMovieItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMoviesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMoviesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.movies, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetMovieItem.deserialize(reader), GetMovieItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMoviesResponse {
            return GetMoviesResponse.deserialize(bytes);
        }
    }
    export class GetMovieItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            description?: string;
            releaseDate?: number;
            scoreKP?: number;
            scoreIMDB?: number;
            poster?: string;
            typeMovie?: number;
            genres?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("releaseDate" in data && data.releaseDate != undefined) {
                    this.releaseDate = data.releaseDate;
                }
                if ("scoreKP" in data && data.scoreKP != undefined) {
                    this.scoreKP = data.scoreKP;
                }
                if ("scoreIMDB" in data && data.scoreIMDB != undefined) {
                    this.scoreIMDB = data.scoreIMDB;
                }
                if ("poster" in data && data.poster != undefined) {
                    this.poster = data.poster;
                }
                if ("typeMovie" in data && data.typeMovie != undefined) {
                    this.typeMovie = data.typeMovie;
                }
                if ("genres" in data && data.genres != undefined) {
                    this.genres = data.genres;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get releaseDate() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set releaseDate(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get scoreKP() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set scoreKP(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get scoreIMDB() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set scoreIMDB(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get poster() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set poster(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get typeMovie() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set typeMovie(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get genres() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set genres(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            description?: string;
            releaseDate?: number;
            scoreKP?: number;
            scoreIMDB?: number;
            poster?: string;
            typeMovie?: number;
            genres?: string;
        }): GetMovieItem {
            const message = new GetMovieItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.releaseDate != null) {
                message.releaseDate = data.releaseDate;
            }
            if (data.scoreKP != null) {
                message.scoreKP = data.scoreKP;
            }
            if (data.scoreIMDB != null) {
                message.scoreIMDB = data.scoreIMDB;
            }
            if (data.poster != null) {
                message.poster = data.poster;
            }
            if (data.typeMovie != null) {
                message.typeMovie = data.typeMovie;
            }
            if (data.genres != null) {
                message.genres = data.genres;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                description?: string;
                releaseDate?: number;
                scoreKP?: number;
                scoreIMDB?: number;
                poster?: string;
                typeMovie?: number;
                genres?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.releaseDate != null) {
                data.releaseDate = this.releaseDate;
            }
            if (this.scoreKP != null) {
                data.scoreKP = this.scoreKP;
            }
            if (this.scoreIMDB != null) {
                data.scoreIMDB = this.scoreIMDB;
            }
            if (this.poster != null) {
                data.poster = this.poster;
            }
            if (this.typeMovie != null) {
                data.typeMovie = this.typeMovie;
            }
            if (this.genres != null) {
                data.genres = this.genres;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.releaseDate != 0)
                writer.writeInt32(4, this.releaseDate);
            if (this.scoreKP != 0)
                writer.writeDouble(5, this.scoreKP);
            if (this.scoreIMDB != 0)
                writer.writeDouble(6, this.scoreIMDB);
            if (this.poster.length)
                writer.writeString(7, this.poster);
            if (this.typeMovie != 0)
                writer.writeInt32(8, this.typeMovie);
            if (this.genres.length)
                writer.writeString(9, this.genres);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMovieItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMovieItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.releaseDate = reader.readInt32();
                        break;
                    case 5:
                        message.scoreKP = reader.readDouble();
                        break;
                    case 6:
                        message.scoreIMDB = reader.readDouble();
                        break;
                    case 7:
                        message.poster = reader.readString();
                        break;
                    case 8:
                        message.typeMovie = reader.readInt32();
                        break;
                    case 9:
                        message.genres = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMovieItem {
            return GetMovieItem.deserialize(bytes);
        }
    }
    export class GetMoviesByIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            description?: string;
            country?: string;
            releaseDate?: number;
            timeMovie?: number;
            scoreKP?: number;
            scoreIMDB?: number;
            poster?: string;
            typeMovie?: number;
            genres?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("releaseDate" in data && data.releaseDate != undefined) {
                    this.releaseDate = data.releaseDate;
                }
                if ("timeMovie" in data && data.timeMovie != undefined) {
                    this.timeMovie = data.timeMovie;
                }
                if ("scoreKP" in data && data.scoreKP != undefined) {
                    this.scoreKP = data.scoreKP;
                }
                if ("scoreIMDB" in data && data.scoreIMDB != undefined) {
                    this.scoreIMDB = data.scoreIMDB;
                }
                if ("poster" in data && data.poster != undefined) {
                    this.poster = data.poster;
                }
                if ("typeMovie" in data && data.typeMovie != undefined) {
                    this.typeMovie = data.typeMovie;
                }
                if ("genres" in data && data.genres != undefined) {
                    this.genres = data.genres;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get releaseDate() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set releaseDate(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get timeMovie() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set timeMovie(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get scoreKP() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set scoreKP(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get scoreIMDB() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set scoreIMDB(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get poster() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set poster(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get typeMovie() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set typeMovie(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get genres() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set genres(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            description?: string;
            country?: string;
            releaseDate?: number;
            timeMovie?: number;
            scoreKP?: number;
            scoreIMDB?: number;
            poster?: string;
            typeMovie?: number;
            genres?: string;
        }): GetMoviesByIdResponse {
            const message = new GetMoviesByIdResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.releaseDate != null) {
                message.releaseDate = data.releaseDate;
            }
            if (data.timeMovie != null) {
                message.timeMovie = data.timeMovie;
            }
            if (data.scoreKP != null) {
                message.scoreKP = data.scoreKP;
            }
            if (data.scoreIMDB != null) {
                message.scoreIMDB = data.scoreIMDB;
            }
            if (data.poster != null) {
                message.poster = data.poster;
            }
            if (data.typeMovie != null) {
                message.typeMovie = data.typeMovie;
            }
            if (data.genres != null) {
                message.genres = data.genres;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                description?: string;
                country?: string;
                releaseDate?: number;
                timeMovie?: number;
                scoreKP?: number;
                scoreIMDB?: number;
                poster?: string;
                typeMovie?: number;
                genres?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.releaseDate != null) {
                data.releaseDate = this.releaseDate;
            }
            if (this.timeMovie != null) {
                data.timeMovie = this.timeMovie;
            }
            if (this.scoreKP != null) {
                data.scoreKP = this.scoreKP;
            }
            if (this.scoreIMDB != null) {
                data.scoreIMDB = this.scoreIMDB;
            }
            if (this.poster != null) {
                data.poster = this.poster;
            }
            if (this.typeMovie != null) {
                data.typeMovie = this.typeMovie;
            }
            if (this.genres != null) {
                data.genres = this.genres;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.country.length)
                writer.writeString(4, this.country);
            if (this.releaseDate != 0)
                writer.writeInt32(5, this.releaseDate);
            if (this.timeMovie != 0)
                writer.writeInt32(6, this.timeMovie);
            if (this.scoreKP != 0)
                writer.writeDouble(7, this.scoreKP);
            if (this.scoreIMDB != 0)
                writer.writeDouble(8, this.scoreIMDB);
            if (this.poster.length)
                writer.writeString(9, this.poster);
            if (this.typeMovie != 0)
                writer.writeInt32(10, this.typeMovie);
            if (this.genres.length)
                writer.writeString(11, this.genres);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMoviesByIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMoviesByIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.country = reader.readString();
                        break;
                    case 5:
                        message.releaseDate = reader.readInt32();
                        break;
                    case 6:
                        message.timeMovie = reader.readInt32();
                        break;
                    case 7:
                        message.scoreKP = reader.readDouble();
                        break;
                    case 8:
                        message.scoreIMDB = reader.readDouble();
                        break;
                    case 9:
                        message.poster = reader.readString();
                        break;
                    case 10:
                        message.typeMovie = reader.readInt32();
                        break;
                    case 11:
                        message.genres = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMoviesByIdResponse {
            return GetMoviesByIdResponse.deserialize(bytes);
        }
    }
    export class AddMoviesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            err?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("err" in data && data.err != undefined) {
                    this.err = data.err;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get err() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set err(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            err?: string;
        }): AddMoviesResponse {
            const message = new AddMoviesResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.err != null) {
                message.err = data.err;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                err?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.err != null) {
                data.err = this.err;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.err.length)
                writer.writeString(2, this.err);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddMoviesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddMoviesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.err = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddMoviesResponse {
            return AddMoviesResponse.deserialize(bytes);
        }
    }
    export class DeleteMoviesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            err?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("err" in data && data.err != undefined) {
                    this.err = data.err;
                }
            }
        }
        get err() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set err(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            err?: string;
        }): DeleteMoviesResponse {
            const message = new DeleteMoviesResponse({});
            if (data.err != null) {
                message.err = data.err;
            }
            return message;
        }
        toObject() {
            const data: {
                err?: string;
            } = {};
            if (this.err != null) {
                data.err = this.err;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.err.length)
                writer.writeString(1, this.err);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteMoviesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteMoviesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.err = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteMoviesResponse {
            return DeleteMoviesResponse.deserialize(bytes);
        }
    }
    export abstract class UnimplementedMoviesV1Service {
        static definition = {
            GetMovies: {
                path: "/movies_v1.MoviesV1/GetMovies",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetMoviesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetMoviesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetMoviesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetMoviesResponse.deserialize(new Uint8Array(bytes))
            },
            GetMovieById: {
                path: "/movies_v1.MoviesV1/GetMovieById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetMoviesByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetMoviesByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetMoviesByIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetMoviesByIdResponse.deserialize(new Uint8Array(bytes))
            },
            GetMoviesByFilter: {
                path: "/movies_v1.MoviesV1/GetMoviesByFilter",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetMoviesByFilterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetMoviesByFilterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetMoviesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetMoviesResponse.deserialize(new Uint8Array(bytes))
            },
            AddMovies: {
                path: "/movies_v1.MoviesV1/AddMovies",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddMoviesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddMoviesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddMoviesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddMoviesResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteMovies: {
                path: "/movies_v1.MoviesV1/DeleteMovies",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteMoviesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteMoviesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteMoviesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteMoviesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetMovies(call: grpc_1.ServerUnaryCall<GetMoviesRequest, GetMoviesResponse>, callback: grpc_1.sendUnaryData<GetMoviesResponse>): void;
        abstract GetMovieById(call: grpc_1.ServerUnaryCall<GetMoviesByIdRequest, GetMoviesByIdResponse>, callback: grpc_1.sendUnaryData<GetMoviesByIdResponse>): void;
        abstract GetMoviesByFilter(call: grpc_1.ServerUnaryCall<GetMoviesByFilterRequest, GetMoviesResponse>, callback: grpc_1.sendUnaryData<GetMoviesResponse>): void;
        abstract AddMovies(call: grpc_1.ServerUnaryCall<AddMoviesRequest, AddMoviesResponse>, callback: grpc_1.sendUnaryData<AddMoviesResponse>): void;
        abstract DeleteMovies(call: grpc_1.ServerUnaryCall<DeleteMoviesRequest, DeleteMoviesResponse>, callback: grpc_1.sendUnaryData<DeleteMoviesResponse>): void;
    }
    export class MoviesV1Client {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static GetMovies = new grpc_web_1.MethodDescriptor<GetMoviesRequest, GetMoviesResponse>("/movies_v1.MoviesV1/GetMovies", grpc_web_1.MethodType.UNARY, GetMoviesRequest, GetMoviesResponse, (message: GetMoviesRequest) => message.serialize(), GetMoviesResponse.deserialize);
        GetMovies(message: GetMoviesRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: GetMoviesResponse) => void) {
            return this._client.rpcCall<GetMoviesRequest, GetMoviesResponse>(this._address + "/movies_v1.MoviesV1/GetMovies", message, metadata || {}, MoviesV1Client.GetMovies, callback);
        }
        private static GetMovieById = new grpc_web_1.MethodDescriptor<GetMoviesByIdRequest, GetMoviesByIdResponse>("/movies_v1.MoviesV1/GetMovieById", grpc_web_1.MethodType.UNARY, GetMoviesByIdRequest, GetMoviesByIdResponse, (message: GetMoviesByIdRequest) => message.serialize(), GetMoviesByIdResponse.deserialize);
        GetMovieById(message: GetMoviesByIdRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: GetMoviesByIdResponse) => void) {
            return this._client.rpcCall<GetMoviesByIdRequest, GetMoviesByIdResponse>(this._address + "/movies_v1.MoviesV1/GetMovieById", message, metadata || {}, MoviesV1Client.GetMovieById, callback);
        }
        private static GetMoviesByFilter = new grpc_web_1.MethodDescriptor<GetMoviesByFilterRequest, GetMoviesResponse>("/movies_v1.MoviesV1/GetMoviesByFilter", grpc_web_1.MethodType.UNARY, GetMoviesByFilterRequest, GetMoviesResponse, (message: GetMoviesByFilterRequest) => message.serialize(), GetMoviesResponse.deserialize);
        GetMoviesByFilter(message: GetMoviesByFilterRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: GetMoviesResponse) => void) {
            return this._client.rpcCall<GetMoviesByFilterRequest, GetMoviesResponse>(this._address + "/movies_v1.MoviesV1/GetMoviesByFilter", message, metadata || {}, MoviesV1Client.GetMoviesByFilter, callback);
        }
        private static AddMovies = new grpc_web_1.MethodDescriptor<AddMoviesRequest, AddMoviesResponse>("/movies_v1.MoviesV1/AddMovies", grpc_web_1.MethodType.UNARY, AddMoviesRequest, AddMoviesResponse, (message: AddMoviesRequest) => message.serialize(), AddMoviesResponse.deserialize);
        AddMovies(message: AddMoviesRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: AddMoviesResponse) => void) {
            return this._client.rpcCall<AddMoviesRequest, AddMoviesResponse>(this._address + "/movies_v1.MoviesV1/AddMovies", message, metadata || {}, MoviesV1Client.AddMovies, callback);
        }
        private static DeleteMovies = new grpc_web_1.MethodDescriptor<DeleteMoviesRequest, DeleteMoviesResponse>("/movies_v1.MoviesV1/DeleteMovies", grpc_web_1.MethodType.UNARY, DeleteMoviesRequest, DeleteMoviesResponse, (message: DeleteMoviesRequest) => message.serialize(), DeleteMoviesResponse.deserialize);
        DeleteMovies(message: DeleteMoviesRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: DeleteMoviesResponse) => void) {
            return this._client.rpcCall<DeleteMoviesRequest, DeleteMoviesResponse>(this._address + "/movies_v1.MoviesV1/DeleteMovies", message, metadata || {}, MoviesV1Client.DeleteMovies, callback);
        }
    }
}
