/* eslint-disable */
// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: protos/auth_v1/auth_v1.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace auth_v1 {
    export class CheckAuthRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            userId?: number;
            firstName?: string;
            lastName?: string;
            username?: string;
            photoUrl?: string;
            authDate?: string;
            isAdmin?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("photoUrl" in data && data.photoUrl != undefined) {
                    this.photoUrl = data.photoUrl;
                }
                if ("authDate" in data && data.authDate != undefined) {
                    this.authDate = data.authDate;
                }
                if ("isAdmin" in data && data.isAdmin != undefined) {
                    this.isAdmin = data.isAdmin;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get photoUrl() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set photoUrl(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get authDate() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set authDate(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get isAdmin() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set isAdmin(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            token?: string;
            userId?: number;
            firstName?: string;
            lastName?: string;
            username?: string;
            photoUrl?: string;
            authDate?: string;
            isAdmin?: boolean;
        }): CheckAuthRequest {
            const message = new CheckAuthRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.photoUrl != null) {
                message.photoUrl = data.photoUrl;
            }
            if (data.authDate != null) {
                message.authDate = data.authDate;
            }
            if (data.isAdmin != null) {
                message.isAdmin = data.isAdmin;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                userId?: number;
                firstName?: string;
                lastName?: string;
                username?: string;
                photoUrl?: string;
                authDate?: string;
                isAdmin?: boolean;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.photoUrl != null) {
                data.photoUrl = this.photoUrl;
            }
            if (this.authDate != null) {
                data.authDate = this.authDate;
            }
            if (this.isAdmin != null) {
                data.isAdmin = this.isAdmin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.userId != 0)
                writer.writeInt32(2, this.userId);
            if (this.firstName.length)
                writer.writeString(3, this.firstName);
            if (this.lastName.length)
                writer.writeString(4, this.lastName);
            if (this.username.length)
                writer.writeString(5, this.username);
            if (this.photoUrl.length)
                writer.writeString(6, this.photoUrl);
            if (this.authDate.length)
                writer.writeString(7, this.authDate);
            if (this.isAdmin != false)
                writer.writeBool(8, this.isAdmin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckAuthRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckAuthRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readInt32();
                        break;
                    case 3:
                        message.firstName = reader.readString();
                        break;
                    case 4:
                        message.lastName = reader.readString();
                        break;
                    case 5:
                        message.username = reader.readString();
                        break;
                    case 6:
                        message.photoUrl = reader.readString();
                        break;
                    case 7:
                        message.authDate = reader.readString();
                        break;
                    case 8:
                        message.isAdmin = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckAuthRequest {
            return CheckAuthRequest.deserialize(bytes);
        }
    }
    export class CheckAuthResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            isAuth?: boolean;
            err?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("isAuth" in data && data.isAuth != undefined) {
                    this.isAuth = data.isAuth;
                }
                if ("err" in data && data.err != undefined) {
                    this.err = data.err;
                }
            }
        }
        get isAuth() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set isAuth(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get err() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set err(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            isAuth?: boolean;
            err?: string;
        }): CheckAuthResponse {
            const message = new CheckAuthResponse({});
            if (data.isAuth != null) {
                message.isAuth = data.isAuth;
            }
            if (data.err != null) {
                message.err = data.err;
            }
            return message;
        }
        toObject() {
            const data: {
                isAuth?: boolean;
                err?: string;
            } = {};
            if (this.isAuth != null) {
                data.isAuth = this.isAuth;
            }
            if (this.err != null) {
                data.err = this.err;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.isAuth != false)
                writer.writeBool(1, this.isAuth);
            if (this.err.length)
                writer.writeString(2, this.err);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckAuthResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckAuthResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.isAuth = reader.readBool();
                        break;
                    case 2:
                        message.err = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckAuthResponse {
            return CheckAuthResponse.deserialize(bytes);
        }
    }
    export abstract class UnimplementedAuthV1Service {
        static definition = {
            CheckAuth: {
                path: "/auth_v1.AuthV1/CheckAuth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckAuthRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckAuthRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckAuthResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckAuthResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CheckAuth(call: grpc_1.ServerUnaryCall<CheckAuthRequest, CheckAuthResponse>, callback: grpc_1.sendUnaryData<CheckAuthResponse>): void;
    }
    export class AuthV1Client {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static CheckAuth = new grpc_web_1.MethodDescriptor<CheckAuthRequest, CheckAuthResponse>("/auth_v1.AuthV1/CheckAuth", grpc_web_1.MethodType.UNARY, CheckAuthRequest, CheckAuthResponse, (message: CheckAuthRequest) => message.serialize(), CheckAuthResponse.deserialize);
        CheckAuth(message: CheckAuthRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: CheckAuthResponse) => void) {
            return this._client.rpcCall<CheckAuthRequest, CheckAuthResponse>(this._address + "/auth_v1.AuthV1/CheckAuth", message, metadata || {}, AuthV1Client.CheckAuth, callback);
        }
    }
}
