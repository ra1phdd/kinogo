/* eslint-disable */
// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: protos/comments_v1/comments_v1.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace comments_v1 {
    export class GetCommentsByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            movieId?: number;
            limit?: number;
            page?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("movieId" in data && data.movieId != undefined) {
                    this.movieId = data.movieId;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get movieId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set movieId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            movieId?: number;
            limit?: number;
            page?: number;
        }): GetCommentsByIdRequest {
            const message = new GetCommentsByIdRequest({});
            if (data.movieId != null) {
                message.movieId = data.movieId;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            return message;
        }
        toObject() {
            const data: {
                movieId?: number;
                limit?: number;
                page?: number;
            } = {};
            if (this.movieId != null) {
                data.movieId = this.movieId;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.movieId != 0)
                writer.writeInt32(1, this.movieId);
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (this.page != 0)
                writer.writeInt32(3, this.page);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommentsByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCommentsByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.movieId = reader.readInt32();
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    case 3:
                        message.page = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCommentsByIdRequest {
            return GetCommentsByIdRequest.deserialize(bytes);
        }
    }
    export class AddCommentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parentId?: number;
            movieId?: number;
            userId?: number;
            text?: string;
            createdAt?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parentId" in data && data.parentId != undefined) {
                    this.parentId = data.parentId;
                }
                if ("movieId" in data && data.movieId != undefined) {
                    this.movieId = data.movieId;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
            }
        }
        get parentId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set parentId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get movieId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set movieId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_createdAt() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            parentId?: number;
            movieId?: number;
            userId?: number;
            text?: string;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): AddCommentRequest {
            const message = new AddCommentRequest({});
            if (data.parentId != null) {
                message.parentId = data.parentId;
            }
            if (data.movieId != null) {
                message.movieId = data.movieId;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            return message;
        }
        toObject() {
            const data: {
                parentId?: number;
                movieId?: number;
                userId?: number;
                text?: string;
                createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.parentId != null) {
                data.parentId = this.parentId;
            }
            if (this.movieId != null) {
                data.movieId = this.movieId;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parentId != 0)
                writer.writeInt32(1, this.parentId);
            if (this.movieId != 0)
                writer.writeInt32(2, this.movieId);
            if (this.userId != 0)
                writer.writeInt32(3, this.userId);
            if (this.text.length)
                writer.writeString(4, this.text);
            if (this.has_createdAt)
                writer.writeMessage(5, this.createdAt, () => this.createdAt.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddCommentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddCommentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parentId = reader.readInt32();
                        break;
                    case 2:
                        message.movieId = reader.readInt32();
                        break;
                    case 3:
                        message.userId = reader.readInt32();
                        break;
                    case 4:
                        message.text = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddCommentRequest {
            return AddCommentRequest.deserialize(bytes);
        }
    }
    export class UpdateCommentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            text?: string;
            updatedAt?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get updatedAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_updatedAt() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            id?: number;
            text?: string;
            updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): UpdateCommentRequest {
            const message = new UpdateCommentRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.updatedAt != null) {
                message.updatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedAt);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                text?: string;
                updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.text.length)
                writer.writeString(2, this.text);
            if (this.has_updatedAt)
                writer.writeMessage(3, this.updatedAt, () => this.updatedAt.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCommentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCommentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.text = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCommentRequest {
            return UpdateCommentRequest.deserialize(bytes);
        }
    }
    export class DelCommentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            parentId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("parentId" in data && data.parentId != undefined) {
                    this.parentId = data.parentId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get parentId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set parentId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            parentId?: number;
        }): DelCommentRequest {
            const message = new DelCommentRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.parentId != null) {
                message.parentId = data.parentId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                parentId?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.parentId != null) {
                data.parentId = this.parentId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.parentId != 0)
                writer.writeInt32(2, this.parentId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelCommentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelCommentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.parentId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelCommentRequest {
            return DelCommentRequest.deserialize(bytes);
        }
    }
    export class GetCommentsByIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            comments?: GetCommentsByIdItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("comments" in data && data.comments != undefined) {
                    this.comments = data.comments;
                }
            }
        }
        get comments() {
            return pb_1.Message.getRepeatedWrapperField(this, GetCommentsByIdItem, 1) as GetCommentsByIdItem[];
        }
        set comments(value: GetCommentsByIdItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            comments?: ReturnType<typeof GetCommentsByIdItem.prototype.toObject>[];
        }): GetCommentsByIdResponse {
            const message = new GetCommentsByIdResponse({});
            if (data.comments != null) {
                message.comments = data.comments.map(item => GetCommentsByIdItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                comments?: ReturnType<typeof GetCommentsByIdItem.prototype.toObject>[];
            } = {};
            if (this.comments != null) {
                data.comments = this.comments.map((item: GetCommentsByIdItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.comments.length)
                writer.writeRepeatedMessage(1, this.comments, (item: GetCommentsByIdItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommentsByIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCommentsByIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.comments, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetCommentsByIdItem.deserialize(reader), GetCommentsByIdItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCommentsByIdResponse {
            return GetCommentsByIdResponse.deserialize(bytes);
        }
    }
    export class GetCommentsByIdItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            user?: GetUserById;
            parentId?: number;
            text?: string;
            createdAt?: dependency_1.google.protobuf.Timestamp;
            updatedAt?: dependency_1.google.protobuf.Timestamp;
            children?: GetCommentsByIdItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("parentId" in data && data.parentId != undefined) {
                    this.parentId = data.parentId;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
                if ("children" in data && data.children != undefined) {
                    this.children = data.children;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user() {
            return pb_1.Message.getWrapperField(this, GetUserById, 2) as GetUserById;
        }
        set user(value: GetUserById) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get parentId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set parentId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_createdAt() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get updatedAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_updatedAt() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get children() {
            return pb_1.Message.getRepeatedWrapperField(this, GetCommentsByIdItem, 7) as GetCommentsByIdItem[];
        }
        set children(value: GetCommentsByIdItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            id?: number;
            user?: ReturnType<typeof GetUserById.prototype.toObject>;
            parentId?: number;
            text?: string;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            children?: ReturnType<typeof GetCommentsByIdItem.prototype.toObject>[];
        }): GetCommentsByIdItem {
            const message = new GetCommentsByIdItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.user != null) {
                message.user = GetUserById.fromObject(data.user);
            }
            if (data.parentId != null) {
                message.parentId = data.parentId;
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.updatedAt != null) {
                message.updatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedAt);
            }
            if (data.children != null) {
                message.children = data.children.map(item => GetCommentsByIdItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                user?: ReturnType<typeof GetUserById.prototype.toObject>;
                parentId?: number;
                text?: string;
                createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                children?: ReturnType<typeof GetCommentsByIdItem.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.parentId != null) {
                data.parentId = this.parentId;
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt.toObject();
            }
            if (this.children != null) {
                data.children = this.children.map((item: GetCommentsByIdItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.has_user)
                writer.writeMessage(2, this.user, () => this.user.serialize(writer));
            if (this.parentId != 0)
                writer.writeInt32(3, this.parentId);
            if (this.text.length)
                writer.writeString(4, this.text);
            if (this.has_createdAt)
                writer.writeMessage(5, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.has_updatedAt)
                writer.writeMessage(6, this.updatedAt, () => this.updatedAt.serialize(writer));
            if (this.children.length)
                writer.writeRepeatedMessage(7, this.children, (item: GetCommentsByIdItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommentsByIdItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCommentsByIdItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.user, () => message.user = GetUserById.deserialize(reader));
                        break;
                    case 3:
                        message.parentId = reader.readInt32();
                        break;
                    case 4:
                        message.text = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.children, () => pb_1.Message.addToRepeatedWrapperField(message, 7, GetCommentsByIdItem.deserialize(reader), GetCommentsByIdItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCommentsByIdItem {
            return GetCommentsByIdItem.deserialize(bytes);
        }
    }
    export class GetUserById extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            photoUrl?: string;
            firstName?: string;
            lastName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("photoUrl" in data && data.photoUrl != undefined) {
                    this.photoUrl = data.photoUrl;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get photoUrl() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set photoUrl(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            username?: string;
            photoUrl?: string;
            firstName?: string;
            lastName?: string;
        }): GetUserById {
            const message = new GetUserById({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.photoUrl != null) {
                message.photoUrl = data.photoUrl;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                photoUrl?: string;
                firstName?: string;
                lastName?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.photoUrl != null) {
                data.photoUrl = this.photoUrl;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.photoUrl.length)
                writer.writeString(3, this.photoUrl);
            if (this.firstName.length)
                writer.writeString(4, this.firstName);
            if (this.lastName.length)
                writer.writeString(5, this.lastName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserById {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserById();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.photoUrl = reader.readString();
                        break;
                    case 4:
                        message.firstName = reader.readString();
                        break;
                    case 5:
                        message.lastName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserById {
            return GetUserById.deserialize(bytes);
        }
    }
    export class AddCommentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            err?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("err" in data && data.err != undefined) {
                    this.err = data.err;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get err() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set err(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            err?: string;
        }): AddCommentResponse {
            const message = new AddCommentResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.err != null) {
                message.err = data.err;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                err?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.err != null) {
                data.err = this.err;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.err.length)
                writer.writeString(2, this.err);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddCommentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddCommentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.err = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddCommentResponse {
            return AddCommentResponse.deserialize(bytes);
        }
    }
    export class UpdateCommentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            err?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("err" in data && data.err != undefined) {
                    this.err = data.err;
                }
            }
        }
        get err() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set err(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            err?: string;
        }): UpdateCommentResponse {
            const message = new UpdateCommentResponse({});
            if (data.err != null) {
                message.err = data.err;
            }
            return message;
        }
        toObject() {
            const data: {
                err?: string;
            } = {};
            if (this.err != null) {
                data.err = this.err;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.err.length)
                writer.writeString(1, this.err);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCommentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCommentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.err = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCommentResponse {
            return UpdateCommentResponse.deserialize(bytes);
        }
    }
    export class DelCommentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            err?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("err" in data && data.err != undefined) {
                    this.err = data.err;
                }
            }
        }
        get err() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set err(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            err?: string;
        }): DelCommentResponse {
            const message = new DelCommentResponse({});
            if (data.err != null) {
                message.err = data.err;
            }
            return message;
        }
        toObject() {
            const data: {
                err?: string;
            } = {};
            if (this.err != null) {
                data.err = this.err;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.err.length)
                writer.writeString(1, this.err);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelCommentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelCommentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.err = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelCommentResponse {
            return DelCommentResponse.deserialize(bytes);
        }
    }
    export abstract class UnimplementedCommentsV1Service {
        static definition = {
            GetCommentsById: {
                path: "/comments_v1.CommentsV1/GetCommentsById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCommentsByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCommentsByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCommentsByIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCommentsByIdResponse.deserialize(new Uint8Array(bytes))
            },
            AddComment: {
                path: "/comments_v1.CommentsV1/AddComment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddCommentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddCommentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddCommentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddCommentResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateComment: {
                path: "/comments_v1.CommentsV1/UpdateComment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateCommentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateCommentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateCommentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateCommentResponse.deserialize(new Uint8Array(bytes))
            },
            DelComment: {
                path: "/comments_v1.CommentsV1/DelComment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DelCommentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DelCommentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DelCommentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DelCommentResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetCommentsById(call: grpc_1.ServerUnaryCall<GetCommentsByIdRequest, GetCommentsByIdResponse>, callback: grpc_1.sendUnaryData<GetCommentsByIdResponse>): void;
        abstract AddComment(call: grpc_1.ServerUnaryCall<AddCommentRequest, AddCommentResponse>, callback: grpc_1.sendUnaryData<AddCommentResponse>): void;
        abstract UpdateComment(call: grpc_1.ServerUnaryCall<UpdateCommentRequest, UpdateCommentResponse>, callback: grpc_1.sendUnaryData<UpdateCommentResponse>): void;
        abstract DelComment(call: grpc_1.ServerUnaryCall<DelCommentRequest, DelCommentResponse>, callback: grpc_1.sendUnaryData<DelCommentResponse>): void;
    }
    export class CommentsV1Client {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static GetCommentsById = new grpc_web_1.MethodDescriptor<GetCommentsByIdRequest, GetCommentsByIdResponse>("/comments_v1.CommentsV1/GetCommentsById", grpc_web_1.MethodType.UNARY, GetCommentsByIdRequest, GetCommentsByIdResponse, (message: GetCommentsByIdRequest) => message.serialize(), GetCommentsByIdResponse.deserialize);
        GetCommentsById(message: GetCommentsByIdRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: GetCommentsByIdResponse) => void) {
            return this._client.rpcCall<GetCommentsByIdRequest, GetCommentsByIdResponse>(this._address + "/comments_v1.CommentsV1/GetCommentsById", message, metadata || {}, CommentsV1Client.GetCommentsById, callback);
        }
        private static AddComment = new grpc_web_1.MethodDescriptor<AddCommentRequest, AddCommentResponse>("/comments_v1.CommentsV1/AddComment", grpc_web_1.MethodType.UNARY, AddCommentRequest, AddCommentResponse, (message: AddCommentRequest) => message.serialize(), AddCommentResponse.deserialize);
        AddComment(message: AddCommentRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: AddCommentResponse) => void) {
            return this._client.rpcCall<AddCommentRequest, AddCommentResponse>(this._address + "/comments_v1.CommentsV1/AddComment", message, metadata || {}, CommentsV1Client.AddComment, callback);
        }
        private static UpdateComment = new grpc_web_1.MethodDescriptor<UpdateCommentRequest, UpdateCommentResponse>("/comments_v1.CommentsV1/UpdateComment", grpc_web_1.MethodType.UNARY, UpdateCommentRequest, UpdateCommentResponse, (message: UpdateCommentRequest) => message.serialize(), UpdateCommentResponse.deserialize);
        UpdateComment(message: UpdateCommentRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: UpdateCommentResponse) => void) {
            return this._client.rpcCall<UpdateCommentRequest, UpdateCommentResponse>(this._address + "/comments_v1.CommentsV1/UpdateComment", message, metadata || {}, CommentsV1Client.UpdateComment, callback);
        }
        private static DelComment = new grpc_web_1.MethodDescriptor<DelCommentRequest, DelCommentResponse>("/comments_v1.CommentsV1/DelComment", grpc_web_1.MethodType.UNARY, DelCommentRequest, DelCommentResponse, (message: DelCommentRequest) => message.serialize(), DelCommentResponse.deserialize);
        DelComment(message: DelCommentRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: DelCommentResponse) => void) {
            return this._client.rpcCall<DelCommentRequest, DelCommentResponse>(this._address + "/comments_v1.CommentsV1/DelComment", message, metadata || {}, CommentsV1Client.DelComment, callback);
        }
    }
}
