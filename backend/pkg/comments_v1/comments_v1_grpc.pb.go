// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: protos/comments_v1/comments_v1.proto

package comments_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentsV1Client is the client API for CommentsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsV1Client interface {
	GetCommentsById(ctx context.Context, in *GetCommentsByIdRequest, opts ...grpc.CallOption) (*GetCommentsByIdResponse, error)
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error)
	DelComment(ctx context.Context, in *DelCommentRequest, opts ...grpc.CallOption) (*DelCommentResponse, error)
}

type commentsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCommentsV1Client(cc grpc.ClientConnInterface) CommentsV1Client {
	return &commentsV1Client{cc}
}

func (c *commentsV1Client) GetCommentsById(ctx context.Context, in *GetCommentsByIdRequest, opts ...grpc.CallOption) (*GetCommentsByIdResponse, error) {
	out := new(GetCommentsByIdResponse)
	err := c.cc.Invoke(ctx, "/comments_v1.CommentsV1/GetCommentsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsV1Client) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, "/comments_v1.CommentsV1/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsV1Client) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error) {
	out := new(UpdateCommentResponse)
	err := c.cc.Invoke(ctx, "/comments_v1.CommentsV1/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsV1Client) DelComment(ctx context.Context, in *DelCommentRequest, opts ...grpc.CallOption) (*DelCommentResponse, error) {
	out := new(DelCommentResponse)
	err := c.cc.Invoke(ctx, "/comments_v1.CommentsV1/DelComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsV1Server is the server API for CommentsV1 service.
// All implementations must embed UnimplementedCommentsV1Server
// for forward compatibility
type CommentsV1Server interface {
	GetCommentsById(context.Context, *GetCommentsByIdRequest) (*GetCommentsByIdResponse, error)
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error)
	DelComment(context.Context, *DelCommentRequest) (*DelCommentResponse, error)
	mustEmbedUnimplementedCommentsV1Server()
}

// UnimplementedCommentsV1Server must be embedded to have forward compatible implementations.
type UnimplementedCommentsV1Server struct {
}

func (UnimplementedCommentsV1Server) GetCommentsById(context.Context, *GetCommentsByIdRequest) (*GetCommentsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsById not implemented")
}
func (UnimplementedCommentsV1Server) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedCommentsV1Server) UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentsV1Server) DelComment(context.Context, *DelCommentRequest) (*DelCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelComment not implemented")
}
func (UnimplementedCommentsV1Server) mustEmbedUnimplementedCommentsV1Server() {}

// UnsafeCommentsV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsV1Server will
// result in compilation errors.
type UnsafeCommentsV1Server interface {
	mustEmbedUnimplementedCommentsV1Server()
}

func RegisterCommentsV1Server(s grpc.ServiceRegistrar, srv CommentsV1Server) {
	s.RegisterService(&CommentsV1_ServiceDesc, srv)
}

func _CommentsV1_GetCommentsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsV1Server).GetCommentsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments_v1.CommentsV1/GetCommentsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsV1Server).GetCommentsById(ctx, req.(*GetCommentsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsV1_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsV1Server).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments_v1.CommentsV1/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsV1Server).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsV1_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsV1Server).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments_v1.CommentsV1/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsV1Server).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsV1_DelComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsV1Server).DelComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments_v1.CommentsV1/DelComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsV1Server).DelComment(ctx, req.(*DelCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentsV1_ServiceDesc is the grpc.ServiceDesc for CommentsV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentsV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comments_v1.CommentsV1",
	HandlerType: (*CommentsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommentsById",
			Handler:    _CommentsV1_GetCommentsById_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _CommentsV1_AddComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentsV1_UpdateComment_Handler,
		},
		{
			MethodName: "DelComment",
			Handler:    _CommentsV1_DelComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/comments_v1/comments_v1.proto",
}
