// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: protos/interactions_v1/interactions_v1.proto

package interactions_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoviesV1Client is the client API for MoviesV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoviesV1Client interface {
	IncrementView(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error)
	IncrementLike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error)
	IncrementDislike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error)
	DecrementView(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error)
	DecrementLike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error)
	DecrementDislike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error)
}

type moviesV1Client struct {
	cc grpc.ClientConnInterface
}

func NewMoviesV1Client(cc grpc.ClientConnInterface) MoviesV1Client {
	return &moviesV1Client{cc}
}

func (c *moviesV1Client) IncrementView(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error) {
	out := new(InteractionsResponse)
	err := c.cc.Invoke(ctx, "/interactions_v1.MoviesV1/IncrementView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesV1Client) IncrementLike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error) {
	out := new(InteractionsResponse)
	err := c.cc.Invoke(ctx, "/interactions_v1.MoviesV1/IncrementLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesV1Client) IncrementDislike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error) {
	out := new(InteractionsResponse)
	err := c.cc.Invoke(ctx, "/interactions_v1.MoviesV1/IncrementDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesV1Client) DecrementView(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error) {
	out := new(InteractionsResponse)
	err := c.cc.Invoke(ctx, "/interactions_v1.MoviesV1/DecrementView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesV1Client) DecrementLike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error) {
	out := new(InteractionsResponse)
	err := c.cc.Invoke(ctx, "/interactions_v1.MoviesV1/DecrementLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesV1Client) DecrementDislike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error) {
	out := new(InteractionsResponse)
	err := c.cc.Invoke(ctx, "/interactions_v1.MoviesV1/DecrementDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoviesV1Server is the server API for MoviesV1 service.
// All implementations must embed UnimplementedMoviesV1Server
// for forward compatibility
type MoviesV1Server interface {
	IncrementView(context.Context, *InteractionsRequest) (*InteractionsResponse, error)
	IncrementLike(context.Context, *InteractionsRequest) (*InteractionsResponse, error)
	IncrementDislike(context.Context, *InteractionsRequest) (*InteractionsResponse, error)
	DecrementView(context.Context, *InteractionsRequest) (*InteractionsResponse, error)
	DecrementLike(context.Context, *InteractionsRequest) (*InteractionsResponse, error)
	DecrementDislike(context.Context, *InteractionsRequest) (*InteractionsResponse, error)
	mustEmbedUnimplementedMoviesV1Server()
}

// UnimplementedMoviesV1Server must be embedded to have forward compatible implementations.
type UnimplementedMoviesV1Server struct {
}

func (UnimplementedMoviesV1Server) IncrementView(context.Context, *InteractionsRequest) (*InteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementView not implemented")
}
func (UnimplementedMoviesV1Server) IncrementLike(context.Context, *InteractionsRequest) (*InteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementLike not implemented")
}
func (UnimplementedMoviesV1Server) IncrementDislike(context.Context, *InteractionsRequest) (*InteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementDislike not implemented")
}
func (UnimplementedMoviesV1Server) DecrementView(context.Context, *InteractionsRequest) (*InteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementView not implemented")
}
func (UnimplementedMoviesV1Server) DecrementLike(context.Context, *InteractionsRequest) (*InteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementLike not implemented")
}
func (UnimplementedMoviesV1Server) DecrementDislike(context.Context, *InteractionsRequest) (*InteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementDislike not implemented")
}
func (UnimplementedMoviesV1Server) mustEmbedUnimplementedMoviesV1Server() {}

// UnsafeMoviesV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoviesV1Server will
// result in compilation errors.
type UnsafeMoviesV1Server interface {
	mustEmbedUnimplementedMoviesV1Server()
}

func RegisterMoviesV1Server(s grpc.ServiceRegistrar, srv MoviesV1Server) {
	s.RegisterService(&MoviesV1_ServiceDesc, srv)
}

func _MoviesV1_IncrementView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesV1Server).IncrementView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions_v1.MoviesV1/IncrementView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesV1Server).IncrementView(ctx, req.(*InteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesV1_IncrementLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesV1Server).IncrementLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions_v1.MoviesV1/IncrementLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesV1Server).IncrementLike(ctx, req.(*InteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesV1_IncrementDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesV1Server).IncrementDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions_v1.MoviesV1/IncrementDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesV1Server).IncrementDislike(ctx, req.(*InteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesV1_DecrementView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesV1Server).DecrementView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions_v1.MoviesV1/DecrementView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesV1Server).DecrementView(ctx, req.(*InteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesV1_DecrementLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesV1Server).DecrementLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions_v1.MoviesV1/DecrementLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesV1Server).DecrementLike(ctx, req.(*InteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesV1_DecrementDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesV1Server).DecrementDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions_v1.MoviesV1/DecrementDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesV1Server).DecrementDislike(ctx, req.(*InteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoviesV1_ServiceDesc is the grpc.ServiceDesc for MoviesV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoviesV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interactions_v1.MoviesV1",
	HandlerType: (*MoviesV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrementView",
			Handler:    _MoviesV1_IncrementView_Handler,
		},
		{
			MethodName: "IncrementLike",
			Handler:    _MoviesV1_IncrementLike_Handler,
		},
		{
			MethodName: "IncrementDislike",
			Handler:    _MoviesV1_IncrementDislike_Handler,
		},
		{
			MethodName: "DecrementView",
			Handler:    _MoviesV1_DecrementView_Handler,
		},
		{
			MethodName: "DecrementLike",
			Handler:    _MoviesV1_DecrementLike_Handler,
		},
		{
			MethodName: "DecrementDislike",
			Handler:    _MoviesV1_DecrementDislike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/interactions_v1/interactions_v1.proto",
}

// CommentsV1Client is the client API for CommentsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsV1Client interface {
	IncrementLike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error)
	IncrementDislike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error)
	DecrementLike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error)
	DecrementDislike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error)
}

type commentsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCommentsV1Client(cc grpc.ClientConnInterface) CommentsV1Client {
	return &commentsV1Client{cc}
}

func (c *commentsV1Client) IncrementLike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error) {
	out := new(InteractionsResponse)
	err := c.cc.Invoke(ctx, "/interactions_v1.CommentsV1/IncrementLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsV1Client) IncrementDislike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error) {
	out := new(InteractionsResponse)
	err := c.cc.Invoke(ctx, "/interactions_v1.CommentsV1/IncrementDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsV1Client) DecrementLike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error) {
	out := new(InteractionsResponse)
	err := c.cc.Invoke(ctx, "/interactions_v1.CommentsV1/DecrementLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsV1Client) DecrementDislike(ctx context.Context, in *InteractionsRequest, opts ...grpc.CallOption) (*InteractionsResponse, error) {
	out := new(InteractionsResponse)
	err := c.cc.Invoke(ctx, "/interactions_v1.CommentsV1/DecrementDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsV1Server is the server API for CommentsV1 service.
// All implementations must embed UnimplementedCommentsV1Server
// for forward compatibility
type CommentsV1Server interface {
	IncrementLike(context.Context, *InteractionsRequest) (*InteractionsResponse, error)
	IncrementDislike(context.Context, *InteractionsRequest) (*InteractionsResponse, error)
	DecrementLike(context.Context, *InteractionsRequest) (*InteractionsResponse, error)
	DecrementDislike(context.Context, *InteractionsRequest) (*InteractionsResponse, error)
	mustEmbedUnimplementedCommentsV1Server()
}

// UnimplementedCommentsV1Server must be embedded to have forward compatible implementations.
type UnimplementedCommentsV1Server struct {
}

func (UnimplementedCommentsV1Server) IncrementLike(context.Context, *InteractionsRequest) (*InteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementLike not implemented")
}
func (UnimplementedCommentsV1Server) IncrementDislike(context.Context, *InteractionsRequest) (*InteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementDislike not implemented")
}
func (UnimplementedCommentsV1Server) DecrementLike(context.Context, *InteractionsRequest) (*InteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementLike not implemented")
}
func (UnimplementedCommentsV1Server) DecrementDislike(context.Context, *InteractionsRequest) (*InteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementDislike not implemented")
}
func (UnimplementedCommentsV1Server) mustEmbedUnimplementedCommentsV1Server() {}

// UnsafeCommentsV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsV1Server will
// result in compilation errors.
type UnsafeCommentsV1Server interface {
	mustEmbedUnimplementedCommentsV1Server()
}

func RegisterCommentsV1Server(s grpc.ServiceRegistrar, srv CommentsV1Server) {
	s.RegisterService(&CommentsV1_ServiceDesc, srv)
}

func _CommentsV1_IncrementLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsV1Server).IncrementLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions_v1.CommentsV1/IncrementLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsV1Server).IncrementLike(ctx, req.(*InteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsV1_IncrementDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsV1Server).IncrementDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions_v1.CommentsV1/IncrementDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsV1Server).IncrementDislike(ctx, req.(*InteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsV1_DecrementLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsV1Server).DecrementLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions_v1.CommentsV1/DecrementLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsV1Server).DecrementLike(ctx, req.(*InteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsV1_DecrementDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsV1Server).DecrementDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions_v1.CommentsV1/DecrementDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsV1Server).DecrementDislike(ctx, req.(*InteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentsV1_ServiceDesc is the grpc.ServiceDesc for CommentsV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentsV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interactions_v1.CommentsV1",
	HandlerType: (*CommentsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrementLike",
			Handler:    _CommentsV1_IncrementLike_Handler,
		},
		{
			MethodName: "IncrementDislike",
			Handler:    _CommentsV1_IncrementDislike_Handler,
		},
		{
			MethodName: "DecrementLike",
			Handler:    _CommentsV1_DecrementLike_Handler,
		},
		{
			MethodName: "DecrementDislike",
			Handler:    _CommentsV1_DecrementDislike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/interactions_v1/interactions_v1.proto",
}
