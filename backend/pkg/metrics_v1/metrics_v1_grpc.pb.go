// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: protos/metrics_v1/metrics_v1.proto

package metrics_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsV1Client is the client API for MetricsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsV1Client interface {
	NewUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*MetricResponse, error)
	AvgTimeOnSite(ctx context.Context, in *AvgTimeOnSiteRequest, opts ...grpc.CallOption) (*MetricResponse, error)
}

type metricsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewMetricsV1Client(cc grpc.ClientConnInterface) MetricsV1Client {
	return &metricsV1Client{cc}
}

func (c *metricsV1Client) NewUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, "/metrics_v1.MetricsV1/NewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsV1Client) AvgTimeOnSite(ctx context.Context, in *AvgTimeOnSiteRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, "/metrics_v1.MetricsV1/AvgTimeOnSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsV1Server is the server API for MetricsV1 service.
// All implementations must embed UnimplementedMetricsV1Server
// for forward compatibility
type MetricsV1Server interface {
	NewUser(context.Context, *NewUserRequest) (*MetricResponse, error)
	AvgTimeOnSite(context.Context, *AvgTimeOnSiteRequest) (*MetricResponse, error)
	mustEmbedUnimplementedMetricsV1Server()
}

// UnimplementedMetricsV1Server must be embedded to have forward compatible implementations.
type UnimplementedMetricsV1Server struct {
}

func (UnimplementedMetricsV1Server) NewUser(context.Context, *NewUserRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUser not implemented")
}
func (UnimplementedMetricsV1Server) AvgTimeOnSite(context.Context, *AvgTimeOnSiteRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvgTimeOnSite not implemented")
}
func (UnimplementedMetricsV1Server) mustEmbedUnimplementedMetricsV1Server() {}

// UnsafeMetricsV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsV1Server will
// result in compilation errors.
type UnsafeMetricsV1Server interface {
	mustEmbedUnimplementedMetricsV1Server()
}

func RegisterMetricsV1Server(s grpc.ServiceRegistrar, srv MetricsV1Server) {
	s.RegisterService(&MetricsV1_ServiceDesc, srv)
}

func _MetricsV1_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsV1Server).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics_v1.MetricsV1/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsV1Server).NewUser(ctx, req.(*NewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsV1_AvgTimeOnSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvgTimeOnSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsV1Server).AvgTimeOnSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics_v1.MetricsV1/AvgTimeOnSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsV1Server).AvgTimeOnSite(ctx, req.(*AvgTimeOnSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsV1_ServiceDesc is the grpc.ServiceDesc for MetricsV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics_v1.MetricsV1",
	HandlerType: (*MetricsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewUser",
			Handler:    _MetricsV1_NewUser_Handler,
		},
		{
			MethodName: "AvgTimeOnSite",
			Handler:    _MetricsV1_AvgTimeOnSite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/metrics_v1/metrics_v1.proto",
}
